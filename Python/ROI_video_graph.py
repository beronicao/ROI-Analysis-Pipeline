import matplotlib.pyplot as plt
from matplotlib import gridspec
import numpy as np
np.set_printoptions(suppress=True) # don't show exponential notation
import os
from read_roi import read_roi_zip

class TiffVid:
    def __init__(self,fname):
        print("LOADING TIFF VIDEO",fname)
        self.fname=fname

        self.loadCSV(fname) # LOAD IMAGEJ EXPORT DATA
        self.loadTXT(fname) # LOAD EXPERIMENT INFO

        # BASELINE SUBTRACTION
        self.dataBL=np.array(self.data)
        for colNum,col in enumerate(self.dataBL):
            if colNum is 0: continue
            baseline=np.average(col[self.conf['baseline'][0]:self.conf['baseline'][1]])
            self.dataBL[colNum]=self.dataBL[colNum]-baseline

        # BACKGROUND SUBTRACTION - subtract the first ROI from all the rest
        for i in range(2,len(self.dataBL)):
            self.dataBL[i]=self.dataBL[i]-self.dataBL[1]
        self.dataBL[1]=self.dataBL[1]*0


    def loadTXT(self, fname):
        """load a text file and return its content as a dictionary"""
        fname=fname[:-4]+".txt"
        if not os.path.exists(fname):
            print("WARNING: experiment file does not exist, so I'll make one.")
            with open(fname,'w') as f:
                f.write("")
        with open(fname) as f:
            raw=f.readlines()
        conf={"baseline":[0,1],"period":1}
        for line in raw:
            line=line.strip()
            if line.startswith("#"): continue
            if line.count("=")==1:
                var,val=line.split("=")
                vals=val.split("-")
                for i in range(len(vals)):
                    vals[i]=float(vals[i])
                if len(vals)==1:
                    vals=vals[0]
                conf[var]=vals
                print("",var,"=",vals)
        self.conf=conf

    def loadCSV(self, fname, labelsToo=False):
        """
        load a CSV generated by ImageJ and return it as a numpy array.
        Returns data in the same shape as it exists in the CSV.
        """
        print("loading data from:",fname)
        with open(fname) as f:
            raw=f.readlines()
        if not raw[0].startswith(" ,"):
            for i in range(10):
                print("WARNING: This doesn't look like an ImageJ export CSV!")
        labels=raw[0].strip().split(",")
        labels[0]="frame"
        raw=raw[1:]
        nRows=len(raw)
        nCols=len(labels)
        data=np.empty((nRows,nCols))
        for row in range(nRows):
            data[row]=raw[row].split(",")
        print("loaded %d lines of data from %d ROIs"%(nRows,nCols-1))
        if labelsToo:
            return [data,labels]
        self.data=np.transpose(data)

    def figure_shade(self):
        """read the conf and shade the regions it contains."""
        colors=['r','g','b','o','m','k','y']
        for i,key in enumerate(self.conf):
            if type(self.conf[key]) is list and len(self.conf[key])==2:
                plt.axvspan(self.conf[key][0]*self.conf['period']/60,
                            self.conf[key][1]*self.conf['period']/60,
                                alpha=.1,lw=0,label=key,
                                color=colors[i])

    def figure_avgStd(self):
        plt.figure(figsize=(8,6))
        avg=np.mean(self.data[1:],axis=0)
        err=np.std(self.data[1:],axis=0)
        plt.fill_between(self.data[0]*self.conf['period']/60,
                         avg-err,avg+err,alpha=.1,lw=0,label="stdev")
        plt.plot(self.data[0]*self.conf['period']/60,avg,
                         label="avg (n=%d)"%len(self.data[1:]))
        plt.grid(alpha=.5)
        plt.axhline(0,color='k',ls='--')
        self.figure_shade()
        plt.margins(0,.1)
        plt.tight_layout()
        plt.legend(fontsize=11)
        plt.ylabel("baseline subtracted pixel value (AFU)")
        plt.xlabel("experiment duration (minutes)")
        plt.title("delta AFU[]")
        plt.title(r'$\Delta$'+" pixel (AFU) [%s]"%os.path.basename(self.fname))
        plt.savefig("01-raw.png",dpi=100)
        plt.show()
        plt.close()

    def figure_BL_avg(self):
        plt.figure(figsize=(8,6))
        avg=np.mean(self.dataBL[1:],axis=0)
        err=np.std(self.dataBL[1:],axis=0)
        plt.fill_between(self.dataBL[0]*self.conf['period']/60,
                         avg-err,avg+err,alpha=.1,lw=0,label="stdev")
        plt.plot(self.dataBL[0]*self.conf['period']/60,avg,
                         label="avg (n=%d)"%len(self.dataBL[1:]))
        plt.grid(alpha=.5)
        plt.axhline(0,color='k',ls='--')
        self.figure_shade()
        plt.margins(0,.1)
        plt.tight_layout()
        plt.legend(fontsize=11)
        plt.ylabel("baseline subtracted pixel value (AFU)")
        plt.xlabel("experiment duration (minutes)")
        plt.title(r'$\Delta$'+" pixel (AFU) [%s]"%os.path.basename(self.fname))
        #plt.savefig("01-raw.png",dpi=100)
        plt.show()
        plt.close()

    def figure_raw_all(self):
        plt.figure(figsize=(8,6))
        for i in range(1,len(self.data)):
            plt.plot(self.data[0]*self.conf['period']/60,self.data[i],alpha=.5)
        plt.grid(alpha=.5)
        self.figure_shade()
        plt.margins(0,.1)
        plt.tight_layout()
        plt.legend(fontsize=11)
        plt.ylabel("baseline subtracted pixel value (AFU)")
        plt.xlabel("experiment duration (minutes)")
        plt.title("raw pixel values (AFU) [%s]"%os.path.basename(self.fname))
        #plt.savefig("01-raw.png",dpi=100)
        plt.show()
        plt.close()

    def figure_raw_all_highlight(self,upToFrame=-1):
        """
        render an image ready for video overlay showing all ROI traces
        and highlighting up to a certain frame.
        """
        plt.figure(figsize=(8,6))
        if upToFrame<0:
            upToFrame=len(self.data[0])
        for i in range(1,len(self.data)):
            offsetX=i*1
            offsetY=i*2
            plt.plot(offsetX+self.dataBL[0]*self.conf['period']/60,
                     offsetY+self.dataBL[i],
                     color='k',alpha=.2,lw=1)

            plt.plot(offsetX+self.dataBL[0][:upToFrame]*self.conf['period']/60,
                     offsetY+self.dataBL[i][:upToFrame],
                     color='y',alpha=.5,lw=3)

        plt.axis('off')
        plt.margins(0,.1)
        plt.tight_layout()
        #plt.savefig("01-raw.png",dpi=100)
        plt.show()
        plt.close()

    def figure_tiff_and_graph(self,fnamePic='../data/sample.jpg',frame=-1):

        # PREPARE THE FIGURE
        mult=1
        plt.figure(figsize=(16*mult,9*mult))
        gs = gridspec.GridSpec(1, 2, width_ratios=[3, 1])

        # LEFT AXES - FIGURE
        ax0 = plt.subplot(gs[0])
        img=plt.imread(fnamePic)
        ax0.imshow(img, zorder=0)
        roiFile=self.fname[:-4]+".zip"
        if os.path.exists(roiFile):
            rois = read_roi_zip(roiFile)
            for p,roi in enumerate(rois):
                color='y'
                if p==0:
                    color='c'
                X1,Y1=rois[roi]['left'],rois[roi]['top']
                X2,Y2=rois[roi]['width']+X1,rois[roi]['height']+Y1
                ax0.plot([X1,X2,X2,X1,X1],[Y1,Y1,Y2,Y2,Y1],
                         color=color,alpha=.5,lw=2)
                ax0.text(X1+1,Y1+5,str(p+1),va='top',color=color,
                         fontsize='small',fontweight='bold')

        msg="%s\nframe:%d\nminutes: %.02f"%(self.fname,frame,
                                            frame*self.conf['period'])
        ax0.text(2,2,msg,va='top',color='k',
                 fontsize='small',fontweight='bold')
        ax0.text(0,0,msg,va='top',color='w',
                 fontsize='small',fontweight='bold')

        plt.margins(0,0)
        plt.axis('off')

        # RIGHT AXES - GRAPHS
        ax1 = plt.subplot(gs[1])
        if frame<0:
            frame=len(self.data[0])

        offsetX=0
        offsetY=-5
        for i in range(1,len(self.data)):
            ax1.text(-3,offsetY*i-offsetY*.5,str(i))
            ax1.plot(offsetX*i+self.dataBL[0]*self.conf['period']/60,
                     offsetY*i+self.dataBL[i],
                     color='k',alpha=.2,lw=1)
            ax1.plot(offsetX*i+self.dataBL[0][:frame]*self.conf['period']/60,
                     offsetY*i+self.dataBL[i][:frame],
                     color='b',alpha=.5,lw=1)
        self.figure_shade()
        plt.axis('off')
        plt.margins(0,.01)

        # FIX UP THE FIGURE, SAVE, AND SHOW
        plt.tight_layout()
        plt.savefig("video_frame_%05d.png"%frame)
        plt.show()
        plt.close()


if __name__=="__main__":
    #TV=TiffVid("../data/2017-05-23 cell1.csv")
    TV=TiffVid(r"X:\Data\SCOTT\2017-05-10 GCaMP6f\2017-05-10 GCaMP6f PFC GABA cre\2017-05-23 cell2.csv")

#    TV.figure_BL_avg()
#    TV.figure_raw_all()
#    TV.figure_raw_all_highlight()
    TV.figure_tiff_and_graph(frame=2400)

    print("DONE")